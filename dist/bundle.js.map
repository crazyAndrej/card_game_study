{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://game_card/./script.js"],"sourcesContent":["const btnStart = document.querySelector('.btn__start')\nconst fieldControls = document.querySelectorAll('.field__control')\nlet game_level = []\nconst gameSection = document.querySelector('.game-section_container')\nconst gameTable = document.createElement('div') // тут будет стол с игрой\n\nconst restartBtn = document.querySelector('.restart_btn')\n// const hidden = document.querySelector('.hide')\nconst container = document.querySelector('.container').classList\nconst cardField = document.querySelector('.game-section_container').classList\n\nlet cards = []\n\nconst winScreen = document.querySelector('.result_screen_win_container')\nconst lostScreen = document.querySelector('.result_screen_lost')\n\nfor (let i = 0; i < fieldControls.length; i++) {\n    fieldControls[i].addEventListener('click', () => {\n        console.log(`${fieldControls[i].name}: ${fieldControls[i].value}`)\n        localStorage.setItem('level', fieldControls[i].value)\n        game_level = localStorage.level\n    })\n}\n\nbtnStart.addEventListener('click', () => startGame(game_level))\nconst startGame = (game_level) => {\n    let firstCard = null\n    let secondCard = null\n    let clickable = true\n\n    container.toggle('cardsField')\n    cardField.toggle('cardsField')\n\n    const cardsIcons = createIconsArray(game_level)\n    const duplicatedCardsIcons = duplicateArray(cardsIcons)\n\n    shuffle(duplicatedCardsIcons)\n\n    duplicatedCardsIcons.forEach((icon) =>\n        gameTable.append(createGameCard('notFlippedCard', icon))\n    )\n\n    gameSection.append(gameTable, restartBtn)\n\n    cards.forEach((card) => card.addEventListener('click', () => {}))\n\n    function get_elapsed_time_string(total_seconds) {\n        function pretty_time_string(num) {\n            return (num < 10 ? '0' : '') + num\n        }\n\n        let minutes = Math.floor(total_seconds / 60)\n        total_seconds = total_seconds % 60\n\n        let seconds = Math.floor(total_seconds)\n\n        minutes = pretty_time_string(minutes)\n        seconds = pretty_time_string(seconds)\n\n        const currentTimeString = minutes + ':' + seconds\n        return currentTimeString\n    }\n\n    let elapsed_seconds = 0\n    setInterval(function () {\n        elapsed_seconds =\n            elapsed_seconds +\n            1('.timer').text(get_elapsed_time_string(elapsed_seconds))\n    }, 5000)\n\n    cards = document.querySelectorAll('.game-card')\n\n    const karty = document.querySelectorAll('.game-card')\n    karty.forEach((karta) => karta.classList.add('flip'))\n    karty.forEach((karta) =>\n        setTimeout(() => {\n            karta.classList.remove('flip')\n        }, 5000)\n    )\n\n    cards.forEach((card, index) =>\n        card.addEventListener('click', () => {\n            if (\n                clickable === true &&\n                !card.classList.contains('successfully')\n            ) {\n                card.classList.add('flip')\n\n                if (firstCard === null) {\n                    firstCard = index\n                } else {\n                    if (index !== firstCard) {\n                        secondCard = index\n                        clickable = false\n                    }\n                }\n                if (\n                    firstCard !== null &&\n                    secondCard !== null &&\n                    firstCard !== secondCard\n                ) {\n                    if (\n                        cards[firstCard].firstElementChild.className ===\n                        cards[secondCard].firstElementChild.className\n                    ) {\n                        setTimeout(() => {\n                            cards[firstCard].classList.add('successfully')\n                            cards[secondCard].classList.add('successfully')\n\n                            firstCard = null\n                            secondCard = null\n                            clickable = true\n                        }, 500)\n                    } else {\n                        setTimeout(() => {\n                            cards[firstCard].classList.remove('flip')\n                            cards[secondCard].classList.remove('flip')\n\n                            firstCard = null\n                            secondCard = null\n                            clickable = true\n                        }, 500)\n                    }\n                }\n            }\n\n            if (\n                Array.from(cards).every((card) =>\n                    card.className.includes('flip')\n                )\n            ) {\n                gameSection.remove(gameTable)\n                winScreen.style.display = 'inherit'\n                setTimeout(500)\n                document.querySelector('.timer').classList.remove('timer')\n            }\n\n            if (\n                Array.from(cards).forEach((card) =>\n                    card.className.includes('flip')\n                )\n            ) {\n                gameSection.remove(gameTable)\n                lostScreen.style.display = 'inherit'\n                setTimeout(500)\n                document.querySelector('.timer').classList.remove('timer')\n            }\n        })\n    )\n}\n\nconst duplicateArray = (array) =>\n    array.reduce((res, current) => res.concat([current, current]), [])\n\nconst createIconsArray = (initialCount) => {\n    const cardsIcons = [\n        {\n            value: '6',\n            suit: 'peaks',\n        },\n        {\n            value: '7',\n            suit: 'peaks',\n        },\n        {\n            value: '8',\n            suit: 'peaks',\n        },\n        {\n            value: '9',\n            suit: 'peaks',\n        },\n        {\n            value: '10',\n            suit: 'peaks',\n        },\n        {\n            value: 'Q',\n            suit: 'peaks',\n        },\n        {\n            value: 'K',\n            suit: 'peaks',\n        },\n        {\n            value: 'J',\n            suit: 'peaks',\n        },\n        {\n            value: 'A',\n            suit: 'peaks',\n        },\n        {\n            value: '6',\n            suit: 'tambourine',\n        },\n        {\n            value: '7',\n            suit: 'tambourine',\n        },\n        {\n            value: '8',\n            suit: 'tambourine',\n        },\n        {\n            value: '9',\n            suit: 'tambourine',\n        },\n        {\n            value: '10',\n            suit: 'tambourine',\n        },\n        {\n            value: 'Q',\n            suit: 'tambourine',\n        },\n        {\n            value: 'K',\n            suit: 'tambourine',\n        },\n        {\n            value: 'J',\n            suit: 'tambourine',\n        },\n        {\n            value: 'A',\n            suit: 'tambourine',\n        },\n        {\n            value: '6',\n            suit: 'cross',\n        },\n        {\n            value: '7',\n            suit: 'cross',\n        },\n        {\n            value: '8',\n            suit: 'cross',\n        },\n        {\n            value: '9',\n            suit: 'cross',\n        },\n        {\n            value: '10',\n            suit: 'cross',\n        },\n        {\n            value: 'Q',\n            suit: 'cross',\n        },\n        {\n            value: 'K',\n            suit: 'cross',\n        },\n        {\n            value: 'J',\n            suit: 'cross',\n        },\n        {\n            value: 'A',\n            suit: 'cross',\n        },\n        {\n            value: '6',\n            suit: 'hearts',\n        },\n        {\n            value: '7',\n            suit: 'hearts',\n        },\n        {\n            value: '8',\n            suit: 'hearts',\n        },\n        {\n            value: '9',\n            suit: 'hearts',\n        },\n        {\n            value: '10',\n            suit: 'hearts',\n        },\n        {\n            value: 'Q',\n            suit: 'hearts',\n        },\n        {\n            value: 'K',\n            suit: 'hearts',\n        },\n        {\n            value: 'J',\n            suit: 'hearts',\n        },\n        {\n            value: 'A',\n            suit: 'hearts',\n        },\n    ]\n\n    switch (initialCount) {\n        case '6':\n            shuffle(cardsIcons)\n            return cardsIcons.slice(0, 3)\n\n        case '12':\n            shuffle(cardsIcons)\n            return cardsIcons.slice(0, 6)\n\n        case '18':\n            shuffle(cardsIcons)\n            return cardsIcons.slice(0, 9)\n\n        default:\n            break\n    }\n}\n\nconst shuffle = (array) => {\n    let currentIndex = array.length,\n        randomIndex\n\n    while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n        ;[array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ]\n    }\n\n    return array\n}\n\nconst createGameCard = (defaultIcon, flippedCardIcon) => {\n    const card = document.createElement('div')\n    card.classList.add('game-card')\n\n    const notFlippedCardI = document.createElement('i')\n    const flippedCardI = document.createElement('i')\n\n    notFlippedCardI.classList.add(`notFlippedCard`)\n    flippedCardI.innerHTML = `${flippedCardIcon.value}`\n    flippedCardI.classList.add(\n        `flippedCard`,\n        `${flippedCardIcon.suit}`,\n        `${flippedCardIcon.value}`\n    )\n\n    card.append(flippedCardI, notFlippedCardI)\n\n    return card\n}\n\ngameSection.append(gameTable, restartBtn)\n\ndocument.querySelectorAll('.restart_btn').forEach((button) => {\n    button.addEventListener('click', () => window.location.reload())\n})\n"],"names":["btnStart","document","querySelector","fieldControls","querySelectorAll","game_level","gameSection","gameTable","createElement","restartBtn","container","classList","cardField","cards","winScreen","lostScreen","i","length","addEventListener","console","log","name","value","localStorage","setItem","level","startGame","firstCard","secondCard","clickable","toggle","cardsIcons","createIconsArray","duplicatedCardsIcons","duplicateArray","shuffle","forEach","icon","append","createGameCard","card","elapsed_seconds","setInterval","text","total_seconds","pretty_time_string","num","minutes","Math","floor","seconds","get_elapsed_time_string","karty","karta","add","setTimeout","remove","index","contains","firstElementChild","className","Array","from","every","includes","style","display","array","reduce","res","current","concat","initialCount","suit","slice","randomIndex","currentIndex","random","defaultIcon","flippedCardIcon","notFlippedCardI","flippedCardI","innerHTML","button","window","location","reload"],"sourceRoot":""}